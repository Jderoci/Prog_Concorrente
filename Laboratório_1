#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>

#define TAM 10000

int vetor[TAM];

//Função a ser executada
void *multiplica_vetor (void *thread_id) {
    int id = *(int *)thread_id;
    for(int i = id; i < TAM; i += 2){
        vetor[i] = vetor[i] * 2;
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t tid[2];
    int id[2];
    int vetor_teste[TAM];
    
    //Inicializando o vetor e o vetor de teste
    for(int i = 0; i < TAM; i++){
        vetor[i] = i + 1;
        vetor_teste[i] = i + 1;
    }
    
    for(int i = 0; i < TAM; i++){
        vetor_teste[i] = vetor_teste[i] * 2;
    }

    //Criando as threads
    for(int i = 0; i < 2; i++){
        id[i] = i;
        if (pthread_create(&tid[i], NULL, multiplica_vetor, (void *)&id[i])){
            printf("--ERRO: pthread_create()\n"); exit(-1);
            }
        }
    
    //Finalizando as threads
    for(int i = 0; i < 2; i++){ 
        if (pthread_join(tid[i], NULL)){
            printf("--ERRO: pthread_join()\n"); exit(-1);
        }
    }
    
    //Verificando os valores do vetor
    for(int i = 0; i < TAM; i++){
        if(vetor[i] != vetor_teste[i]){
            printf("Os valores do vetor não estão corretos..");
            return 1;
        }
    }
    printf("Os valores do vetor estão corretos!");
    return 0;
}
